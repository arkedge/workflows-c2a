name: build-c2a
description: Build C2A user

author: '@sksat'

inputs:
  c2a_repo:
    type: string
    default: ${{ github.repository }}
  gh_federation_endpoint:
    type: string
    default: ""
  federation_repos:
    type: string
    default: ""
  c2a_dir:
    type: string
    default: '.'
  c2a_custom_setup:
    type: string
    default: ''
  sils_mockup:
    type: boolean
    default: false
  build_as_cxx:
    type: boolean
    default: false
  cmake_generator:
    type: string
    default: 'Unix Makefiles'
  cmake_flags:
    type: string
    default: ''
  # reviewdog
  reviewdog_version:
    type: string
    default: latest
  reviewdog_tool_name:
    type: string
    default: clang-tidy
  reviewdog_reporter:
    type: string
    default: github-pr-review
  reviewdog_filter_mode:
    type: string
    default: added

runs:
  using: "composite"
  steps:
    - name: gh-federation
      if: inputs.federation_repos != ''
      uses: arkedge/gh-federation@7fcfbfdb79bad94f98041c1fb9c317b9ae198011 # v4.0.1
      with:
        endpoint: ${{ inputs.gh_federation_endpoint }}
        repos: ${{ inputs.federation_repos }}

    - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      with:
        repository: ${{ inputs.c2a_repo }}
        submodules: 'recursive'
        path: c2a_user

    - name: Install dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build libc6-dev-i386 g++-multilib

    - name: Custom Setup
      if: inputs.c2a_custom_setup != ''
      working-directory: ./c2a_user/${{ inputs.c2a_dir }}
      shell: bash
      run: ${{ inputs.c2a_custom_setup }}

    - name: CMake
      if: inputs.build_as_cxx == 'false'
      working-directory: ./c2a_user/${{ inputs.c2a_dir }}
      shell: bash
      run: |
        cmake -B ./build \
          -G "${{ inputs.cmake_generator }}" \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
          -DBUILD_C2A_AS_CXX=OFF \
          -DC2A_BUILD_AS_CXX=OFF \
          ${{ (inputs.sils_mockup && '-DUSE_SILS_MOCKUP=ON') || '' }} ${{ (inputs.sils_mockup && '-DC2A_BUILD_WITH_SILS_MOCKUP=ON') || '' }} \
          ${{ inputs.cmake_flags }}

    - name: CMake as C++
      if: inputs.build_as_cxx == 'true'
      env:
        CC: clang
        CXX: clang++
      working-directory: ./c2a_user/${{ inputs.c2a_dir }}
      shell: bash
      # ignore windows.h
      run: |
        cmake -B ./build \
          -G "${{ inputs.cmake_generator }}" \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
          -DBUILD_C2A_AS_CXX=ON \
          -DC2A_BUILD_AS_CXX=ON \
          -DUSE_SCI_COM_WINGS=OFF -DC2A_USE_SCI_COM_WINGS=OFF \
          ${{ inputs.cmake_flags }}

    - name: Build
      working-directory: ./c2a_user/${{ inputs.c2a_dir }}
      shell: bash
      run: cmake --build ./build

    - name: Run executable by SILS mockup
      if: inputs.sils_mockup == 'true'
      working-directory: ./c2a_user/${{ inputs.c2a_dir }}
      shell: bash
      run: |
        ls -lh ./build/C2A
        timeout 3 ./build/C2A || exit 0

    - name: reviewdog with clang-tidy -${{ matrix.warning }}
      if: env.CC == 'clang'
      uses: arkedge/action-clang-tidy@8faddab26ad258e389cef75916414df15c3a9544 # v1.5.0
      with:
        reviewdog_version: ${{ inputs.reviewdog_version }}
        tool_name: ${{ inputs.reviewdog_tool_name }}
        reporter: ${{ inputs.reviewdog_reporter }}
        filter_mode: ${{ inputs.reviewdog_filter_mode }}
        workdir: ./c2a_user/${{ inputs.c2a_dir }}/build
