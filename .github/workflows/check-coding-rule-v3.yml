name: check coding rule

on:
  workflow_call:
    inputs:
      federation_repos:
        type: string
        default: ""
      c2a_dir:
        type: string
        default: '.'
      c2a_custom_setup:
        type: string
        default: ''
      c2a_core:
        type: boolean
        default: false
      config_file:
        type: string
        description: check_coding_rule config file(relative path from <C2A user>/src)
        default: src_user/Script/CI/check_coding_rule.json
      reviewdog_version:
        type: string
        default: latest
    secrets:
      GH_FEDERATION_ENDPOINT:
        required: false

env:
  # 設定ファイルなどのパスは <c2a-user>/src からの相対パス（TODO: c2a-user top からの相対パスにする）
  CORE_CONFIG_FILE: src_core/Script/CI/check_coding_rule.json
  check_script: ./src_core/Script/CI/check_coding_rule.py

jobs:
  check_coding_rule:
    runs-on: ubuntu-22.04

    steps:
      - name: gh-federation
        if: inputs.federation_repos != ''
        uses: arkedge/gh-federation@7fcfbfdb79bad94f98041c1fb9c317b9ae198011 # v4.0.1
        with:
          endpoint: ${{ secrets.GH_FEDERATION_ENDPOINT }}
          repos: ${{ inputs.federation_repos }}

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: recursive

      - uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f # v5.1.1
        with:
          python-version-file: .github/workflows/.python-version
          architecture: 'x64'

      - name: Custom Setup
        if: inputs.c2a_custom_setup != ''
        working-directory: ${{ inputs.c2a_dir }}
        shell: bash
        run: ${{ inputs.c2a_custom_setup }}

      - name: check config file
        id: config
        shell: bash
        env:
          CONFIG_FILE: ${{ inputs.config_file }}
        working-directory: ${{ inputs.c2a_dir }}/src
        run: |
          if [ -e "$CONFIG_FILE" ]; then
            echo "config_file=${CONFIG_FILE}" >> "$GITHUB_OUTPUT"
          else
            echo "${CONFIG_FILE} does not exist"
            echo "fallback to c2a-core config file"

            echo "config_file=${CORE_CONFIG_FILE}" >> "$GITHUB_OUTPUT"
          fi

      - name: check config dirs
        run: |
          C2A_SRC_DIR="$(jq -r .c2a_root_dir < ${{ inputs.c2a_dir }}/src/${{ steps.config.outputs.config_file }})"
          TARGET_DIRS="$(jq -r .target_dirs[] < ${{ inputs.c2a_dir }}/src/${{ steps.config.outputs.config_file }})"
          echo ".c2a_root_dir: ${C2A_SRC_DIR}"
          echo ".target_dirs: ${TARGET_DIRS}"
          cd "${{ inputs.c2a_dir }}/src/$(dirname ${{ env.check_script }})"
          echo "${TARGET_DIRS}" | while read -r target_dir; do
            echo "target_dir: ${target_dir}"
            ls "${C2A_SRC_DIR}/${target_dir}"
            echo ""
          done

      - name: check coding rule
        id: check
        shell: bash -e {0}
        continue-on-error: true
        working-directory: ${{ inputs.c2a_dir }}/src
        run: |
          C2A_SRC_DIR="$(pwd)"
          # このスクリプトはスクリプトと同じディレクトリで実行されることが多い（この workflow では一旦それを標準化する）
          cd "$(dirname ${{ env.check_script }})"
          python "$(basename ${{ env.check_script }})" "${C2A_SRC_DIR}/${{ steps.config.outputs.config_file }}" | tee /tmp/coding-rule.log
          status="${PIPESTATUS[0]}"
          echo "status: ${status}"
          echo "status=${status}" >> "$GITHUB_OUTPUT"
          exit "${status}"

      - name: install reviewdog
        uses: reviewdog/action-setup@3f401fe1d58fe77e10d665ab713057375e39b887 # v1.3.0
        with:
          reviewdog_version: ${{ inputs.reviewdog_version }}

      - name: fix error log source file path for c2a-core
        if: inputs.c2a_core == 'true'
        run: |
          sed -i 's/.\/src_core\///g' /tmp/coding-rule.log
          cat /tmp/coding-rule.log

      - name: fix error log source file path
        run: |
          C2A_SRC_DIR="$(cat ${{ inputs.c2a_dir }}/src/${{ steps.config.outputs.config_file }} | jq -r .c2a_root_dir)"
          sed -i "s ${C2A_SRC_DIR} ${{ inputs.c2a_dir }}/src/ g" /tmp/coding-rule.log
          cat /tmp/coding-rule.log

      - name: reviewdog(github-pr-review)
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          reviewdog \
            -name 'check_coding_rule' \
            -level error \
            -fail-on-error=true \
            -filter-mode=added \
            -diff="git diff FETCH_HEAD" \
            -reporter=github-pr-review \
            -efm="%-GThe above files are invalid coding rule." \
            -efm="%E%f: %l: %m" \
            -efm="%C" \
            -efm="%Z%s" \
            < /tmp/coding-rule.log

      - name: exit
        shell: bash
        run: |
          exit $(( "${{ steps.check.outputs.status }}" ))
