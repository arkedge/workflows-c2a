name: check coding rule

on:
  workflow_call:
    inputs:
      federation_repos:
        type: string
        default: ""
      c2a_dir:
        type: string
        default: '.'
      c2a_custom_setup:
        type: string
        default: ''
      c2a_core:
        type: boolean
        default: false
      config_file:
        type: string
        description: check_coding_rule config file(relative path from <C2A user>/src)
        default: src_user/Script/CI/check_coding_rule.json

env:
  CORE_CONFIG_FILE: src_core/Script/CI/check_coding_rule.json
  check_script: ./src_core/Script/CI/check_coding_rule.py

jobs:
  check_coding_rule:
    runs-on: ubuntu-22.04

    steps:
      - name: gh-federation
        if: inputs.federation_repos != ''
        uses: arkedge/gh-federation@437d2b0433a7d4a009e311d176d18abd85626fa4 # v3.1.0
        with:
          endpoint: ${{ secrets.GH_FEDERATION_ENDPOINT }}
          repos: ${{ inputs.federation_repos }}

      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
        with:
          submodules: recursive

      - uses: actions/setup-python@61a6322f88396a6271a6ee3565807d608ecaddd1 # v4.7.0
        with:
          python-version-file: .github/workflows/.python-version
          architecture: 'x64'

      - name: Custom Setup
        if: inputs.c2a_custom_setup != ''
        working-directory: ${{ inputs.c2a_dir }}
        shell: bash
        run: ${{ inputs.c2a_custom_setup }}

      - name: check config file
        id: config
        shell: bash
        env:
          CONFIG_FILE: ${{ inputs.config_file }}
        working-directory: ${{ inputs.c2a_dir }}/src
        run: |
          if [ -e "$CONFIG_FILE" ]; then
            echo "config_file=${CONFIG_FILE}" >> "$GITHUB_OUTPUT"
          else
            echo "${CONFIG_FILE} does not exist"
            echo "fallback to c2a-core config file"

            echo "config_file=${CORE_CONFIG_FILE}" >> "$GITHUB_OUTPUT"
          fi

      - name: update config file
        uses: jossef/action-set-json-field@7ea163261afe43847c06afab44419845339a6be2
        with:
          # FIXME: Dirty
          file: ${{ inputs.c2a_dir }}/src/${{ steps.config.outputs.config_file }}
          field: "c2a_root_dir"
          value: ${{ github.workspace }}

      - name: check coding rule
        id: check
        shell: bash -e {0}
        continue-on-error: true
        working-directory: ${{ inputs.c2a_dir }}/src
        run: |
          python ${{ env.check_script }} ${{ steps.config.outputs.config_file }} | tee /tmp/coding-rule.log
          status="${PIPESTATUS[0]}"
          echo "status: ${status}"
          echo "status=${status}" >> "$GITHUB_OUTPUT"
          exit "${status}"

      - name: install reviewdog
        uses: reviewdog/action-setup@80a06617492b461a66508e2dedf16233f0506804 # v1.0.6

      - name: fix error log source file path for c2a-core
        if: inputs.c2a_core == 'true'
        run: |
          sed -i 's/.\/src_core\///g' /tmp/coding-rule.log
          cat /tmp/coding-rule.log

      - name: fix error log source file path
        run: |
          sed -i 's ./src_user ${{ inputs.c2a_dir }}/src/src_user g' /tmp/coding-rule.log
          cat /tmp/coding-rule.log

      - name: reviewdog(github-pr-review)
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          reviewdog \
            -name 'check_coding_rule' \
            -level error \
            -fail-on-error=true \
            -filter-mode=added \
            -diff="git diff FETCH_HEAD" \
            -reporter=github-pr-review \
            -efm="%-GThe above files are invalid coding rule." \
            -efm="%E%f: %l: %m" \
            -efm="%C" \
            -efm="%Z%s" \
            < /tmp/coding-rule.log

      - name: exit
        shell: bash
        run: |
          exit $(( "${{ steps.check.outputs.status }}" ))
